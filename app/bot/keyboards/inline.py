# backend/app/bot/keyboards/inline.py

from typing import Dict, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.callback_data import ManagerCallback # <<< –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É

from app.core.config import settings

# –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±—ã–ª –≤ –≤–∞—à–µ–º –∫–æ–¥–µ, –Ω–æ –º—ã –µ–≥–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö.
# –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ–∞–±—Ä–∏–∫–∞ –∫–æ–ª–±—ç–∫–æ–≤ ManagerOrderCallback, –æ—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ.
# –ï—Å–ª–∏ –Ω–µ—Ç, –∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å—Ç—Ä–æ–∫–∏ "status:proc:123", —Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –Ω–µ –Ω—É–∂–µ–Ω.
# –û—Å—Ç–∞–≤–∏–º –µ–≥–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è.
# from app.bot.callback_data import ManagerOrderCallback 

# =============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# =============================================================================

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App –º–∞–≥–∞–∑–∏–Ω–∞.
    """
    builder = InlineKeyboardBuilder()

    if not settings.MINI_APP_URL_BOT:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ URL –Ω–µ –∑–∞–¥–∞–Ω
        import logging
        logging.getLogger(__name__).warning("MINI_APP_URL_BOT is not set in settings. Cannot create WebApp button.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
        builder.button(text="‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data="shop_unavailable")
    else:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç WebAppInfo —Å URL –Ω–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        web_app_info = WebAppInfo(url=settings.MINI_APP_URL_BOT)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ web_app
        builder.button(
            text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω",
            web_app=web_app_info
        )

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –æ–¥–∏–Ω —Ä—è–¥
    builder.adjust(1)
    return builder.as_markup()

# =============================================================================
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
# =============================================================================

def get_admin_order_keyboard(order_id: int, customer_tg_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º –≤ —á–∞—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –í —Ä–∞–±–æ—Ç—É (Processing)",
            callback_data=f"status:proc:{order_id}"
        ),
        InlineKeyboardButton(
            text="üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω (Completed)",
            callback_data=f"status:comp:{order_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å (Cancelled)",
            callback_data=f"status:canc:{order_id}"
        )
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º (–ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç)
    builder.row(
        InlineKeyboardButton(
            text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É",
            url=f"tg://user?id={customer_tg_id}"
        )
    )
    
    return builder.as_markup()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ callback-—Å–æ–∫—Ä–∞—â–µ–Ω–∏–π –≤ –ø–æ–ª–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
# –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–µ –∫–æ–ª–±—ç–∫–æ–≤.
STATUS_MAP = {
    "proc": {"slug": "processing", "text": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"},
    "comp": {"slug": "completed", "text": "–í—ã–ø–æ–ª–Ω–µ–Ω"},
    "canc": {"slug": "cancelled", "text": "–û—Ç–º–µ–Ω–µ–Ω"},
}


def get_manager_orders_keyboard(orders: List[Dict], page: int, total_pages: int, status_slug: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
    """
    builder = InlineKeyboardBuilder()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
    for order in orders:
        order_id = order.get('id')
        order_number = order.get('number', order_id)
        total = order.get('total', '?')
        currency = order.get('currency', 'RUB')
        
        builder.button(
            text=f"–ó–∞–∫–∞–∑ ‚Ññ{order_number}  |  {total} {currency}",
            callback_data=ManagerCallback(
                target="orders",
                action="details",
                order_id=order_id,
                page=page, # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–µ–µ
                value=status_slug # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä —Å—Ç–∞—Ç—É—Å–∞
            ).pack()
        )

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=ManagerCallback(
                    target="orders", action="page", page=page - 1, value=status_slug
                ).pack()
            )
        )
    if total_pages > 1:
         pagination_buttons.append(
            InlineKeyboardButton(
                text=f"{page}/{total_pages}",
                callback_data="do_nothing" # –ü—É—Å—Ç—ã—à–∫–∞, –ø—Ä–æ—Å—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            )
        )
    if page < total_pages:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=ManagerCallback(
                    target="orders", action="page", page=page + 1, value=status_slug
                ).pack()
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if pagination_buttons:
        builder.row(*pagination_buttons)

    # –ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)
    
    return builder.as_markup()


def get_manager_order_details_keyboard(order: Dict, current_page: int, status_slug: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º.
    """
    builder = InlineKeyboardBuilder()
    order_id = order.get('id')
    current_status = order.get('status')

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤
    status_transitions = {
        'on-hold': [('processing', '‚úÖ –í —Ä–∞–±–æ—Ç—É'), ('cancelled', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')],
        'processing': [('completed', 'üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω'), ('cancelled', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')],
        # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–Ω–æ–ø–æ–∫ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –±—É–¥–µ—Ç
    }
    
    action_buttons = []
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    possible_actions = status_transitions.get(current_status, [])
    
    for new_status, text in possible_actions:
        action_buttons.append(
            InlineKeyboardButton(
                text=text,
                callback_data=ManagerCallback(
                    target="orders",
                    action="set_status",
                    order_id=order_id,
                    page=current_page,
                    value=new_status  # –í value –ø–µ—Ä–µ–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                ).pack()
            )
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if action_buttons:
        builder.row(*action_buttons, width=2) # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    customer_tg_id = None
    for meta in order.get('meta_data', []):
        if meta.get('key') == '_telegram_user_id':
            customer_tg_id = int(meta.get('value'))
            break
            
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º", –µ—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ –µ–≥–æ ID
    if customer_tg_id:
        builder.row(
            InlineKeyboardButton(
                text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º",
                callback_data=ManagerCallback(
                    target="customer", # –¶–µ–ª—å - –∫–ª–∏–µ–Ω—Ç
                    action="contact",  # –î–µ–π—Å—Ç–≤–∏–µ - —Å–≤—è–∑–∞—Ç—å—Å—è
                    order_id=order_id, # –ü–µ—Ä–µ–¥–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    value=str(customer_tg_id) # –í value –ø–µ—Ä–µ–¥–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞
                ).pack()
            )
        )
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data=ManagerCallback(
                target="orders",
                action="page", # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
                page=current_page,
                value=status_slug # –° —Ç–µ–º –∂–µ —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
            ).pack()
        )
    )

    return builder.as_markup()

def get_customers_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ '–ö–ª–∏–µ–Ω—Ç—ã'."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üîé –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞",
        callback_data=ManagerCallback(target="customers", action="search_start").pack()
    )
    builder.button(
        text="üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        callback_data=ManagerCallback(target="customers", action="list", page=1).pack()
    )
    builder.button(
        text="üî¢ –û–±—â–µ–µ —á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤",
        callback_data=ManagerCallback(target="customers", action="total").pack()
    )
    builder.adjust(1)
    return builder.as_markup()

def get_customers_pagination_keyboard(page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    pagination_buttons = []
    
    if page > 1:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=ManagerCallback(target="customers", action="page", page=page - 1).pack()
            )
        )
    if total_pages > 1:
        pagination_buttons.append(
            InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="do_nothing")
        )
    if page < total_pages:
        pagination_buttons.append(
            InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=ManagerCallback(target="customers", action="page", page=page + 1).pack()
            )
        )
        
    if pagination_buttons:
        builder.row(*pagination_buttons)
        
    return builder.as_markup()
def get_stats_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
    builder.button(
        text="üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è",
        callback_data=ManagerCallback(target="stats", action="get", value="today").pack()
    )
    builder.button(
        text="üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é",
        callback_data=ManagerCallback(target="stats", action="get", value="week").pack()
    )
    builder.button(
        text="üóìÔ∏è –ó–∞ –º–µ—Å—è—Ü",
        callback_data=ManagerCallback(target="stats", action="get", value="month").pack()
    )
    
    builder.adjust(1) # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def get_post_order_keyboard(order_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–π –∫–æ–Ω—Ç–∞–∫—Ç",
        callback_data=f"send_contact:{order_id}"
    )
    return builder.as_markup()

def get_request_contact_from_manager_keyboard(order_id: int) -> InlineKeyboardMarkup: # <<< –î–æ–±–∞–≤–∏–ª–∏ order_id
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
    –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ—Ç—Å—è –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    builder = InlineKeyboardBuilder()
    
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ callback_data
    builder.button(
        text="üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º",
        callback_data=f"req_contact_mgr:{order_id}"
    )
    return builder.as_markup()
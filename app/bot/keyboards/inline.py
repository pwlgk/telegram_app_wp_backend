# backend/app/bot/keyboards/inline.py
from typing import Dict, List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder
from app.bot.callback_data import ManagerOrderCallback
from app.core.config import settings

def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Web App –º–∞–≥–∞–∑–∏–Ω–∞.
    """
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º InlineKeyboardBuilder –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    builder = InlineKeyboardBuilder()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –¥–ª—è Mini App –∑–∞–¥–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if not settings.MINI_APP_URL:
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–Ω–æ–ø–∫—É WebApp.
        # –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ.
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
        import logging
        logging.getLogger(__name__).warning("MINI_APP_URL is not set in settings. Cannot create WebApp button.")
        # –í–µ—Ä–Ω–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–Ω–æ–ø–∫—É –∫–∞–∫ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –∏–ª–∏ –º–æ–∂–Ω–æ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
        builder.button(text="‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", callback_data="shop_unavailable")
    else:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç WebAppInfo —Å URL –Ω–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        web_app_info = WebAppInfo(url=settings.MINI_APP_URL)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–∏–ø–∞ web_app
        builder.button(
            text="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
            web_app=web_app_info
        )

    # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return builder.as_markup()

# –ü—Ä–∏–º–µ—Ä –¥—Ä—É–≥–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è
# def get_some_other_keyboard() -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.button(text="–ö–Ω–æ–ø–∫–∞ 1", callback_data="button_1_pressed")
#     builder.button(text="–ö–Ω–æ–ø–∫–∞ 2", callback_data="button_2_pressed")
#     builder.adjust(2) # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
#     return builder.as_markup()

def get_manager_orders_keyboard(orders: List[Dict], current_page: int, total_pages: int) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    if not orders:
        builder.button(text="–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è", callback_data="mng_no_orders")
    else:
        for order in orders:
            order_id = order.get('id')
            customer_name = order.get('billing', {}).get('first_name', '–ö–ª–∏–µ–Ω—Ç') # –ü—Ä–æ—Å—Ç–æ–µ –∏–º—è
            total = order.get('total', '?')
            currency = order.get('currency_symbol', '$')
            status = order.get('status', '?')
            builder.button(
                text=f"#{order_id} ({customer_name}) - {total}{currency} [{status}]",
                callback_data=ManagerOrderCallback(action="details", order_id=order_id).pack()
            )

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    row_buttons = []
    if current_page > 1:
        row_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=ManagerOrderCallback(action="page", value=str(current_page - 1)).pack()
        ))
    if orders and current_page < total_pages: # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–í–ø–µ—Ä–µ–¥", —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã –∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
         row_buttons.append(InlineKeyboardButton(
             text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
             callback_data=ManagerOrderCallback(action="page", value=str(current_page + 1)).pack()
         ))
    if row_buttons:
         builder.row(*row_buttons) # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥

    builder.adjust(1) # –ö–∞–∂–¥—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
def get_order_details_keyboard(order_id: int, current_status: str) -> InlineKeyboardMarkup:
     builder = InlineKeyboardBuilder()
     # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
     possible_statuses = {
         'on-hold': [('processing', '–í –æ–±—Ä–∞–±–æ—Ç–∫—É'), ('cancelled', '–û—Ç–º–µ–Ω–∏—Ç—å')],
         'processing': [('completed', '–í—ã–ø–æ–ª–Ω–µ–Ω'), ('cancelled', '–û—Ç–º–µ–Ω–∏—Ç—å')],
         # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
     }
     # –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ–≥–¥–∞ (–∏–ª–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
     always_possible = [('on-hold', '–ù–∞ —É–¥–µ—Ä–∂–∞–Ω–∏–µ')]

     available_actions = possible_statuses.get(current_status, []) + always_possible

     status_buttons = []
     for status_key, status_text in available_actions:
         if status_key != current_status: # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
             status_buttons.append(
                 InlineKeyboardButton(
                     text=f"‚û°Ô∏è {status_text}",
                     callback_data=ManagerOrderCallback(
                         action="set_status",
                         order_id=order_id,
                         value=status_key
                     ).pack()
                 )
             )

     if status_buttons:
         builder.row(*status_buttons, width=1) # –ö–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ –æ–¥–Ω–æ–π –≤ —Ä—è–¥

     # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
     builder.row(InlineKeyboardButton(
         text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤",
         callback_data=ManagerOrderCallback(action="list").pack() # –ü—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É (–Ω–∞ 1—é —Å—Ç—Ä)
     ))
     return builder.as_markup()
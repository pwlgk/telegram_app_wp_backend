# backend/app/bot/utils.py
import logging
from typing import Dict
from aiogram import Bot
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.utils.markdown import hbold, hlink, hcode

# <<< –ü–†–ê–í–ò–õ–¨–ù–´–ô –ò–ú–ü–û–†–¢ –î–õ–Ø –°–û–í–†–ï–ú–ï–ù–ù–û–ì–û AIOGRAM >>>
import html

logger = logging.getLogger(__name__)
html_escape = html.escape
# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ ---
async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –≤–∏–¥–∏–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ –º–µ–Ω—é."""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å / –ù–∞—á–∞—Ç—å"),
        BotCommand(command="shop", description="üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω"), # <<< –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê
        BotCommand(command="myorders", description="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"),
    ]
    try:
        await bot.set_my_commands(commands, scope=BotCommandScopeDefault())
        logger.info("Bot commands have been set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

# --- –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–µ ---
def format_customer_info(user_info: dict, billing_info: dict = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –±–ª–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ —Å–≤—è–∑–∏.
    """
    tg_user_id = user_info.get('id')
    tg_username = user_info.get('username')
    
    # <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú –í–°–¢–†–û–ï–ù–ù–£–Æ –ë–ò–ë–õ–ò–û–¢–ï–ö–£ HTML –î–õ–Ø –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø >>>
    # –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, –Ω–µ –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ aiogram.
    # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å None
    first_name_val = user_info.get('first_name')
    last_name_val = user_info.get('last_name')

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ html.escape, –∞ –Ω–µ None
    tg_first_name = html.escape(first_name_val or '')
    tg_last_name = html.escape(last_name_val or '')
    
    # –ò–º—è: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –¥–∞–Ω–Ω—ã–º –∏–∑ Telegram
    full_name = f"{tg_first_name} {tg_last_name}".strip()
    if not full_name:
        full_name = "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        
    lines = [hbold(full_name)]

    # 1. –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    lines.append(f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å TG: {hlink('–û—Ç–∫—Ä—ã—Ç—å', f'tg://user?id={tg_user_id}')}")
    
    # 2. –Æ–∑–µ—Ä–Ω–µ–π–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if tg_username:
        lines.append(f"‚Ä¢ –Æ–∑–µ—Ä–Ω–µ–π–º: @{tg_username}")
    
    # 3. –î–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–∞/–ø—Ä–æ—Ñ–∏–ª—è WP
    if billing_info:
        phone = billing_info.get('phone')
        email = billing_info.get('email')
        if phone:
            lines.append(f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {hcode(phone)}")
        if email and '@telegram.user' not in email:
            lines.append(f"‚Ä¢ Email: {hcode(email)}")

    return "\n".join(lines)


async def format_order_details(order: Dict, bot: Bot) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
    """
    order_id = order.get('id', 'N/A')
    order_number = order.get('number', order_id)
    status = order.get('status', 'N/A')
    total = order.get('total', 'N/A')
    currency = order.get('currency', '')
    customer_note = html.escape(order.get('customer_note', ''))

    # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ë–õ–û–ö –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• –û –ö–õ–ò–ï–ù–¢–ï ---
    customer_block = "–ö–ª–∏–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω"
    billing_info = order.get('billing', {})
    
    telegram_user_id = None
    for meta in order.get('meta_data', []):
        if meta.get('key') == '_telegram_user_id':
            try:
                telegram_user_id = int(meta.get('value'))
                break
            except (ValueError, TypeError):
                pass

    if telegram_user_id:
        user_info_for_formatter = {'id': telegram_user_id}
        
        # –®–∞–≥ 1: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Telegram
        try:
            logger.debug(f"Attempting to get_chat for user_id: {telegram_user_id}")
            chat = await bot.get_chat(chat_id=telegram_user_id)
            logger.debug(f"get_chat response for {telegram_user_id}: {chat.model_dump_json(indent=2)}")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞ Telegram
            user_info_for_formatter['first_name'] = chat.first_name
            user_info_for_formatter['last_name'] = chat.last_name
            user_info_for_formatter['username'] = chat.username
            
        except Exception as e:
            logger.warning(f"Could not fetch chat info for user {telegram_user_id}: {e}. Falling back to stored data.")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—â–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –º–µ—Ç–∞-–ø–æ–ª—è—Ö –∑–∞–∫–∞–∑–∞
            for meta in order.get('meta_data', []):
                if meta.get('key') == '_telegram_username':
                    user_info_for_formatter['username'] = meta.get('value')
                # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å first/last name –≤ –º–µ—Ç–∞-–ø–æ–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                # if meta.get('key') == '_telegram_first_name':
                #     user_info_for_formatter['first_name'] = meta.get('value')
        
        # –®–∞–≥ 2: –ï—Å–ª–∏ –∏–º—è –∏–∑ Telegram –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, –±–µ—Ä–µ–º –µ–≥–æ –∏–∑ –±–∏–ª–ª–∏–Ω–≥–∞
        current_name = f"{user_info_for_formatter.get('first_name', '')} {user_info_for_formatter.get('last_name', '')}".strip()
        if not current_name and billing_info.get('first_name'):
             logger.debug(f"User name from Telegram is empty, using name from billing info: {billing_info.get('first_name')}")
             user_info_for_formatter['first_name'] = billing_info.get('first_name')
             user_info_for_formatter['last_name'] = billing_info.get('last_name', '')

        customer_block = format_customer_info(user_info_for_formatter, billing_info)
    else:
        # –ï—Å–ª–∏ –≤ –∑–∞–∫–∞–∑–µ –≤–æ–æ–±—â–µ –Ω–µ—Ç ID, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∏–ª–ª–∏–Ω–≥–∞
        name = f"{billing_info.get('first_name', '')} {billing_info.get('last_name', '')}".strip()
        phone = billing_info.get('phone', '')
        customer_block = hbold(name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        if phone:
            customer_block += f"\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {hcode(phone)}"
    # --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê ---

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    items_list = []
    for item in order.get('line_items', []):
        name = html.escape(item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'))
        quantity = item.get('quantity', 0)
        item_total = item.get('total', '0')
        items_list.append(f" ‚Ä¢ {name} ({quantity} —à—Ç.) - {hbold(f'{item_total} {currency}')}")
    items_str = "\n".join(items_list) if items_list else "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç."

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üì¶ {hbold(f'–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number}')}\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {hcode(status)}\n"
        f"<b>–°—É–º–º–∞:</b> {hbold(f'{total} {currency}')}\n\n"
        f"üë§ {hbold('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:')}\n{customer_block}\n\n"
        f"üõí {hbold('–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:')}\n{items_str}\n\n"
    )

    if customer_note:
        text += f"üìù {hbold('–ó–∞–º–µ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:')}\n{customer_note}"

    return text


def format_customer_order_details(order: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é –∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞.
    """

    status_map = {
        'on-hold': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
        'refunded': 'üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω',
        'failed': '‚ùóÔ∏è –ù–µ —É–¥–∞–ª—Å—è',
    }
    
    order_number = order.get('number', order.get('id'))
    status_slug = order.get('status', 'unknown')
    status_text = status_map.get(status_slug, status_slug.capitalize())
    total = order.get('total', 'N/A')
    currency = order.get('currency', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    items_list = []
    for item in order.get('line_items', []):
        name = html.escape(item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'))
        quantity = item.get('quantity', 0)
        item_total = item.get('total', '0')
        items_list.append(f" ‚Ä¢ {name} ({quantity} —à—Ç.) - {hbold(f'{item_total} {currency}')}")
    items_str = "\n".join(items_list) if items_list else "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –ø—É—Å—Ç."

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–º–µ—Ç–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    note = order.get('customer_note')
    note_str = f"\nüóíÔ∏è <b>–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞:</b>\n<i>{html.escape(note)}</i>" if note else ""

    text = (
        f"üßæ {hbold(f'–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number}')}\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ:</b> {hbold(f'{total} {currency}')}\n\n"
        f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n{items_str}"
        f"{note_str}"
    )
    return text
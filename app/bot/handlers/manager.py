# backend/app/bot/handlers/manager.py
import asyncio
import html
import logging
from typing import Dict
from aiogram import Router, F, Bot
from aiogram.filters import Command, StateFilter, or_f # <<< –î–æ–±–∞–≤–ª—è–µ–º or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.exceptions import TelegramAPIError
from datetime import datetime, timedelta # <<< –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from app.bot.keyboards.inline import get_request_contact_from_manager_keyboard, get_stats_menu_keyboard # <<< –î–æ–±–∞–≤–ª—è–µ–º

from app.core.config import settings
from app.services.woocommerce import WooCommerceService
from app.services.telegram import TelegramService
from app.bot.keyboards.reply import get_manager_main_menu, get_order_status_menu, get_back_to_main_menu
from app.bot.keyboards.inline import get_customers_menu_keyboard, get_customers_pagination_keyboard # <<< –î–æ–±–∞–≤–ª—è–µ–º
from app.bot.states import ManagerStates
from app.bot.utils import format_customer_info
from app.bot.callback_data import ManagerCallback # <<< –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–±—Ä–∏–∫—É
from app.bot.utils import format_customer_info, format_order_details # <<< –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
from app.bot.keyboards.inline import get_manager_orders_keyboard, get_manager_order_details_keyboard # <<< –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
from aiogram.utils.markdown import  hlink, hcode

logger = logging.getLogger(__name__)
manager_router = Router(name="manager_handlers")
manager_router.message.filter(F.from_user.id.in_(settings.TELEGRAM_MANAGER_IDS))
manager_router.callback_query.filter(F.from_user.id.in_(settings.TELEGRAM_MANAGER_IDS))


# === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ===
@manager_router.message(Command("panel"))
@manager_router.message(F.text == "‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def show_manager_panel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞!", reply_markup=get_manager_main_menu())


# === –†–ê–ë–û–¢–ê –° –ó–ê–ö–ê–ó–ê–ú–ò (Reply Keyboard) ===
@manager_router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_order_statuses(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=get_order_status_menu())

# --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ ---
async def send_orders_list(target: Message | CallbackQuery, wc_service: WooCommerceService, status_slug: str, page: int = 1):
    is_callback = isinstance(target, CallbackQuery)
    message = target.message if is_callback else target

    try:
        orders, headers = await wc_service.get_orders(status=status_slug.split(','), page=page, per_page=5, order='desc')
        total_pages = int(headers.get('x-wp-totalpages', 1)) if headers else 1

        if not orders:
            await message.answer("–ó–∞–∫–∞–∑—ã —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        keyboard = get_manager_orders_keyboard(orders, page, total_pages, status_slug)
        text = f"<b>–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status_slug}'</b> (–°—Ç—Ä. {page}/{total_pages})"
        
        if is_callback:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)

    except Exception as e:
        logger.error(f"Failed to fetch orders for manager: {e}")
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.")
    
    if is_callback:
        await target.answer()

# --- –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è Reply –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ ---
@manager_router.message(F.text.contains(" (")) # –õ–æ–≤–∏–º –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
async def list_orders_by_status(message: Message, wc_service: WooCommerceService):
    status_text = message.text
    status_slug_map = {
        "–í –æ–∂–∏–¥–∞–Ω–∏–∏": "on-hold", "–í —Ä–∞–±–æ—Ç–µ": "processing",
        "–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ": "completed", "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ": "cancelled",
        "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ": "on-hold,processing"
    }
    
    status_slug = next((slug for key, slug in status_slug_map.items() if key in status_text), None)

    if not status_slug:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å.", reply_markup=get_manager_main_menu())
        return

    await send_orders_list(message, wc_service, status_slug, page=1)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–õ–ë–≠–ö–û–í –ó–ê–ö–ê–ó–û–í ===

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "orders" and F.action == "page"))
async def handle_orders_pagination(query: CallbackQuery, callback_data: ManagerCallback, wc_service: WooCommerceService):
    await send_orders_list(query, wc_service, status_slug=callback_data.value, page=callback_data.page)

# --- –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞) ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "orders" and F.action == "details"))
async def handle_order_details(query: CallbackQuery, callback_data: ManagerCallback, wc_service: WooCommerceService, bot: Bot): # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
    order_id = callback_data.order_id
    
    order = await wc_service.get_order(order_id)
    if not order:
        await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑.", show_alert=True)
        return

    # <<< –í–´–ó–´–í–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–û –ò –ü–ï–†–ï–î–ê–ï–ú bot
    text = await format_order_details(order, bot) 
    
    keyboard = get_manager_order_details_keyboard(
        order=order,
        current_page=callback_data.page,
        status_slug=callback_data.value
    )
    
    await query.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await query.answer()

# --- –°–º–µ–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "orders" and F.action == "set_status"))
async def handle_set_order_status(
    query: CallbackQuery, 
    callback_data: ManagerCallback, 
    wc_service: WooCommerceService, 
    tg_service: TelegramService,
    bot: Bot # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
):
    order_id = callback_data.order_id
    new_status = callback_data.value
    
    await query.answer(f"–ú–µ–Ω—è—é —Å—Ç–∞—Ç—É—Å –Ω–∞ '{new_status}'...")

    updated_order = await wc_service.update_order_status(order_id, new_status)
    if not updated_order:
        await query.answer("–û—à–∏–±–∫–∞! –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ WooCommerce.", show_alert=True)
        return

    customer_tg_id = None
    for meta in updated_order.get('meta_data', []):
        if meta.get('key') == '_telegram_user_id':
            customer_tg_id = int(meta.get('value'))
            break
    
    if customer_tg_id:
        await tg_service.notify_customer_status_update(
            customer_tg_id=customer_tg_id,
            order_id=order_id,
            order_number=updated_order.get('number', str(order_id)),
            new_status=new_status
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞—è –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    # <<< –í–´–ó–´–í–ê–ï–ú –ê–°–ò–ù–•–†–û–ù–ù–û –ò –ü–ï–†–ï–î–ê–ï–ú bot
    text = await format_order_details(updated_order, bot)
    
    keyboard = get_manager_order_details_keyboard(
        order=updated_order,
        current_page=callback_data.page,
        status_slug=callback_data.value # –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ä–∞–±–æ—Ç–∞–ª–∞
    )
    
    await query.message.edit_text(text, reply_markup=keyboard, disable_web_page_preview=True)
    await query.answer("–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")

@manager_router.callback_query(ManagerCallback.filter(F.target == "customer" and F.action == "contact"))
async def handle_contact_customer_start(query: CallbackQuery, callback_data: ManagerCallback, state: FSMContext):
    customer_tg_id = callback_data.value
    order_id = callback_data.order_id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∑–∞–∫–∞–∑–∞ –≤ FSM –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    await state.set_state(ManagerStates.message_to_customer)
    await state.update_data(contact_customer_id=customer_tg_id, contact_order_id=order_id)
    
    await query.message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}.\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã.\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ /cancel.",
        # –£–±–∏—Ä–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∞
        reply_markup=ReplyKeyboardRemove()
    )
    await query.answer()

# --- –û—Ç–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —Å–≤—è–∑–∏ ---
@manager_router.message(Command("cancel"), StateFilter(ManagerStates.message_to_customer))
async def handle_contact_customer_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_manager_main_menu())


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É ---
# –õ–æ–≤–∏–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ —Ç.–¥.), –∫–æ–≥–¥–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@manager_router.message(StateFilter(ManagerStates.message_to_customer), or_f(F.text, F.photo, F.document, F.sticker))
async def handle_send_message_to_customer(message: Message, state: FSMContext, bot: Bot):
    # –î–æ—Å—Ç–∞–µ–º ID –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ FSM
    data = await state.get_data()
    customer_tg_id = data.get('contact_customer_id')
    order_id = data.get('contact_order_id')
    
    if not customer_tg_id:
        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
        prefix = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}:\n\n"
        
        # message.copy_to() - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        # —Å–æ –≤—Å–µ–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (—Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç, —Å—Ç–∏–ª–∏).
        # –ù–æ –æ–Ω –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç.
        # –ü–æ—ç—Ç–æ–º—É –¥–µ–ª–∞–µ–º –≤—Ä—É—á–Ω—É—é:
        
        reply_markup = get_request_contact_from_manager_keyboard(order_id)
        
        if message.text:
            await bot.send_message(
                customer_tg_id, 
                prefix + message.text, 
                reply_markup=reply_markup
            )
        elif message.photo:
            await bot.send_photo(
                customer_tg_id, 
                photo=message.photo[-1].file_id, 
                caption=prefix + (message.caption or ""),
                reply_markup=reply_markup
            )
        elif message.document:
            await bot.send_document(
                customer_tg_id,
                document=message.document.file_id,
                caption=prefix + (message.caption or ""),
                reply_markup=reply_markup
            )
        else: # –°—Ç–∏–∫–µ—Ä—ã –∏ –ø—Ä–æ—á–µ–µ
            # –î–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
            await message.copy_to(customer_tg_id)
            await bot.send_message(
                customer_tg_id, 
                f"–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{order_id}, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                reply_markup=reply_markup
            )

        # –°–æ–æ–±—â–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ–± —É—Å–ø–µ—Ö–µ
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.", reply_markup=get_manager_main_menu())
        logger.info(f"Manager {message.from_user.id} sent a message to customer {customer_tg_id} regarding order {order_id}")

    except TelegramAPIError as e:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –ª–æ–≤–∏–º –æ—à–∏–±–∫—É
        logger.error(f"Failed to send message to customer {customer_tg_id}: {e}")
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. "
            f"–í–æ–∑–º–æ–∂–Ω–æ, –∫–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞.",
            reply_markup=get_manager_main_menu()
        )
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await state.clear()
# === –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò ===
# === –†–ê–ë–û–¢–ê –° –ö–õ–ò–ï–ù–¢–ê–ú–ò ===

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–∞ ---
@manager_router.message(F.text == "üë• –ö–ª–∏–µ–Ω—Ç—ã")
async def customers_main_menu(message: Message):
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞–º–∏:"
    await message.answer(text, reply_markup=get_customers_menu_keyboard())

# --- –ü–æ–∫–∞–∑ –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "customers" and F.action == "total"))
async def show_total_customers(query: CallbackQuery, wc_service: WooCommerceService):
    await query.answer("–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...")
    _, headers = await wc_service.get_customers(per_page=1)
    total_customers = headers.get('x-wp-total', 'N/A') if headers else 'N/A'
    await query.message.answer(f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: <b>{total_customers}</b>")

# --- –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "customers" and F.action == "search_start"))
async def customer_search_start(query: CallbackQuery, state: FSMContext):
    await state.set_state(ManagerStates.customer_search_query)
    await query.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID, –∏–º—è, email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    )
    await query.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ---
@manager_router.message(ManagerStates.customer_search_query)
async def customer_search_process(message: Message, state: FSMContext, wc_service: WooCommerceService, bot: Bot): # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
    await state.clear()
    query = message.text
    await message.answer(f"–ò—â—É –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{query}'...")
    
    customers, _ = await wc_service.get_customers(search=query, per_page=20)
    
    if not customers:
        await message.answer(f"–ö–ª–∏–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=get_manager_main_menu())
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    await send_customers_list_as_message(message, customers, bot) # <<< –ü–µ—Ä–µ–¥–∞–µ–º bot
    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=get_manager_main_menu())

# --- –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞) ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "customers" and F.action == "list"))
async def customers_list_start(query: CallbackQuery, callback_data: ManagerCallback, wc_service: WooCommerceService, bot: Bot): # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
    await show_customers_page(query, wc_service, bot, page=callback_data.page or 1) # <<< –ü–µ—Ä–µ–¥–∞–µ–º bot
    await query.answer()

# --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
@manager_router.callback_query(ManagerCallback.filter(F.target == "customers" and F.action == "page"))
async def customers_list_pagination(query: CallbackQuery, callback_data: ManagerCallback, wc_service: WooCommerceService, bot: Bot): # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
    await show_customers_page(query, wc_service, bot, page=callback_data.page) # <<< –ü–µ—Ä–µ–¥–∞–µ–º bot
    await query.answer()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
async def show_customers_page(target: Message | CallbackQuery, wc_service: WooCommerceService, bot: Bot, page: int): # <<< –î–æ–±–∞–≤–∏–ª–∏ bot
    is_callback = isinstance(target, CallbackQuery)
    message = target.message if is_callback else target
    
    customers, headers = await wc_service.get_customers(per_page=20, page=page)
    total_pages = int(headers.get('x-wp-totalpages', 1)) if headers else 1

    if not customers:
        await message.edit_text("–ö–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –≤–∏–¥–µ –æ–¥–Ω–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await send_customers_list_as_message(message, customers, bot, is_edit=is_callback) # <<< –ü–µ—Ä–µ–¥–∞–µ–º bot
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    # (–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
    pagination_keyboard = get_customers_pagination_keyboard(page, total_pages)
    # –ò—â–µ–º, –±—ã–ª–æ –ª–∏ —É –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    try:
        if is_callback and target.message.reply_markup and "customers" in target.message.reply_markup.inline_keyboard[0][0].callback_data:
            await target.message.edit_reply_markup(reply_markup=pagination_keyboard)
        else:
            await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–ø–∏—Å–∫—É:", reply_markup=pagination_keyboard)
    except TelegramAPIError as e:
        if "message is not modified" in e.message:
            logger.debug("Pagination keyboard is not modified, skipping edit.")
        else:
            raise e # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
async def send_customers_list_as_message(message: Message, customers: list[dict], bot: Bot, is_edit: bool = False):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ TG –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫.
    """
    
    # --- –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ TG –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
    tg_ids_to_fetch = [
        int(meta['value'])
        for customer in customers
        for meta in customer.get('meta_data', [])
        if meta.get('key') == '_telegram_user_id' and meta.get('value')
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ get_chat –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    tasks = [bot.get_chat(chat_id=tg_id) for tg_id in tg_ids_to_fetch]
    # return_exceptions=True, —á—Ç–æ–±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ —Å–ª–æ–º–∞–ª–∞ –≤—Å–µ
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {tg_id: chat_object} –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    actual_tg_data = {
        res.id: res for res in results if not isinstance(res, Exception)
    }

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–ø–∏—Å–∫–∞ ---
    response_lines = []
    for i, customer in enumerate(customers, 1):
        tg_id_str = next((meta['value'] for meta in customer.get('meta_data', []) if meta['key'] == '_telegram_user_id'), None)
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ WooCommerce
        billing_first_name = html.escape(customer.get('first_name', ''))
        billing_last_name = html.escape(customer.get('last_name', ''))
        phone = customer.get('billing', {}).get('phone', '')

        name_str = f"{billing_first_name} {billing_last_name}".strip() or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        username_str = ""
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å TG ID, –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if tg_id_str:
            tg_id = int(tg_id_str)
            chat_info = actual_tg_data.get(tg_id)
            if chat_info:
                # –ë–µ—Ä–µ–º –∏–º—è –∏ —é–∑–µ—Ä–Ω–µ–π–º –∏–∑ —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö Telegram
                tg_first_name = html.escape(chat_info.first_name or '')
                tg_last_name = html.escape(chat_info.last_name or '')
                name_str = f"{tg_first_name} {tg_last_name}".strip()
                if chat_info.username:
                    username_str = f" (@{chat_info.username})"

            # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –¥–µ–ª–∞–µ–º –∏–º—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
            line = f"{i}. {hlink(name_str, f'tg://user?id={tg_id}')}{username_str}"
        else:
            line = f"{i}. {name_str}"
        
        if phone:
            line += f" - {hcode(phone)}"
            
        response_lines.append(line)

    response_text = "\n".join(response_lines)
    
    if is_edit:
        try:
            await message.edit_text(response_text)
        except TelegramAPIError as e:
            if "message is not modified" in e.message:
                logger.debug("Customer list message is not modified, skipping edit.")
            else:
                raise e # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
    else:
        await message.answer(response_text)

# === –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê ===
@manager_router.message(F.text == "üì§ –†–∞—Å—Å—ã–ª–∫–∞")
async def mailing_start(message: Message, state: FSMContext):
    await state.set_state(ManagerStates.mailing_confirm)
    await message.answer(
        "<b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞–ª–∏ –±–æ—Ç–∞.\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardRemove()
    )

@manager_router.message(Command("cancel"), StateFilter(ManagerStates.mailing_confirm))
async def mailing_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_manager_main_menu())

@manager_router.message(ManagerStates.mailing_confirm)
async def mailing_process(message: Message, state: FSMContext, wc_service: WooCommerceService, bot: Bot):
    await state.clear()
    await message.answer("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è.", reply_markup=get_manager_main_menu())

    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï–• –∫–ª–∏–µ–Ω—Ç–æ–≤. –í –ø—Ä–æ–¥–µ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    all_customers, _ = await wc_service.get_customers(per_page=100) # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    
    if not all_customers:
        await message.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return

    sent_count = 0
    failed_count = 0
    skipped_count = 0

    for customer in all_customers:
        tg_id = None
        
        # –°–ø–æ—Å–æ–± 1: –ò—â–µ–º ID –≤ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π)
        for meta in customer.get('meta_data', []):
            if meta.get('key') == '_telegram_user_id':
                try:
                    tg_id = int(meta.get('value'))
                    break
                except (ValueError, TypeError):
                    continue
        
        # –°–ø–æ—Å–æ–± 2 (Fallback): –ï—Å–ª–∏ –º–µ—Ç–∞-–ø–æ–ª—è –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å ID –∏–∑ email
        if not tg_id:
            email = customer.get('email', '')
            if email.startswith('tg_') and email.endswith('@telegram.user'):
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ "tg_12345678@telegram.user"
                    tg_id_str = email.split('@')[0].replace('tg_', '')
                    tg_id = int(tg_id_str)
                    logger.debug(f"Extracted tg_id {tg_id} from email for customer {customer.get('id')}")
                except (ValueError, TypeError):
                    pass # –ï—Å–ª–∏ email –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        if tg_id:
            try:
                # message.copy_to() - —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.copy_to(chat_id=tg_id)
                sent_count += 1
                await asyncio.sleep(0.1) # –ü–∞—É–∑–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –ø–æ–¥ –ª–∏–º–∏—Ç—ã Telegram
            except TelegramAPIError as e:
                logger.warning(f"Failed to send broadcast message to user {tg_id}: {e}")
                failed_count += 1
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã
            skipped_count += 1
    
    report_text = (
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
        f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_count} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞)\n"
    )
    if skipped_count > 0:
        report_text += f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–µ –∏–∑ TG): {skipped_count}"

    await message.answer(report_text)



# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@manager_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_main_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö:"
    await message.answer(text, reply_markup=get_stats_menu_keyboard())

def format_sales_report(report_data: Dict, period_text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    if not report_data:
        return f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥: <b>{period_text}</b>"

    total_sales = report_data.get('total_sales', 0)
    net_sales = report_data.get('net_sales', 0)
    average_sales = report_data.get('average_sales', 0)
    total_orders = report_data.get('total_orders', 0)
    total_items = report_data.get('total_items', 0)

    text = (
        f"üìà <b>–û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ {period_text}</b>\n\n"
        f"<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {total_orders} —à—Ç.\n"
        f"<b>–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_items} —à—Ç.\n"
        f"<b>–ß–∏—Å—Ç–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {net_sales} RUB\n"
        f"<b>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞:</b> {total_sales} RUB\n"
        f"<b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {average_sales} RUB\n"
    )
    return text

@manager_router.callback_query(ManagerCallback.filter(F.target == "stats" and F.action == "get"))
async def get_sales_stats(query: CallbackQuery, callback_data: ManagerCallback, wc_service: WooCommerceService):
    period = callback_data.value
    await query.answer(f"–ó–∞–≥—Ä—É–∂–∞—é –æ—Ç—á–µ—Ç...")

    report_list = None
    period_text = ""

    today = datetime.utcnow().date()
    
    if period == "today":
        period_text = "—Å–µ–≥–æ–¥–Ω—è"
        report_list = await wc_service.get_sales_report(date_min=today, date_max=today)
    elif period == "week":
        period_text = "—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"
        report_list = await wc_service.get_sales_report(period="week")
    elif period == "month":
        period_text = "—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"
        report_list = await wc_service.get_sales_report(period="month")

    report = report_list[0] if report_list else None

    if report is None:
        await query.message.edit_text(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ <b>{period_text}</b>.")
        return

    response_text = format_sales_report(report, period_text)
    await query.message.edit_text(response_text)
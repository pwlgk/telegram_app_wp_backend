# backend/app/bot/handlers/user.py
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.utils.markdown import hbold, hcode
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove, Contact
from app.bot.states import UserStates
from app.bot.keyboards.reply import get_request_contact_keyboard
from app.services.telegram import TelegramService # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
from aiogram.types import CallbackQuery

from app.services.woocommerce import WooCommerceService
from app.services.telegram import TelegramService
from app.bot.keyboards.inline import get_main_menu_keyboard
from aiogram.types import InputMediaPhoto # <<< –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
from app.bot.utils import format_customer_info, format_customer_order_details 
logger = logging.getLogger(__name__)
user_router = Router(name="user_handlers")

@user_router.message(CommandStart())
async def handle_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App.
    """
    logger.info(f"Handler 'handle_start' triggered by user {message.from_user.id}")

    user_name = message.from_user.full_name
    logger.info(f"User {message.from_user.id} ({user_name}) started the bot.")

    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {hbold(user_name)}!\n\n"
        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ "
        f"–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
    )
    reply_markup = get_main_menu_keyboard()

    await message.answer(text=welcome_text, reply_markup=reply_markup)

@user_router.message(Command("myorders"))
async def handle_my_orders(message: Message, wc_service: WooCommerceService, tg_service: TelegramService):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /myorders, –æ—Ç–ø—Ä–∞–≤–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∑–∞–∫–∞–∑–æ–≤."""
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested their orders with /myorders.")
    logger.info(f"Handler 'handle_my_orders' triggered by user {message.from_user.id}")

    customer_email = f"tg_{user_id}@telegram.user"
    customer = await wc_service.get_customer_by_email(customer_email)

    if not customer or not customer.get('id'):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ –∑–∞–∫–∞–∑–æ–≤.")
        return

    orders, _ = await wc_service.get_orders(customer_id=customer['id'], per_page=5, order='desc')
    response_text = tg_service._format_customer_orders(orders) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    await message.answer(response_text)

@user_router.message(F.text.startswith("/order_"))
async def handle_order_details(message: Message, wc_service: WooCommerceService):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /order_<id>, –æ—Ç–ø—Ä–∞–≤–ª—è—è –∫—Ä–∞—Å–∏–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞ —Å —Ñ–æ—Ç–æ.
    """
    try:
        order_id = int(message.text.split("_")[1])
    except (IndexError, ValueError):
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myorders, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested details for order_id {order_id}.")

    # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–∫–∞–∑
    customer_email = f"tg_{user_id}@telegram.user"
    customer = await wc_service.get_customer_by_email(customer_email)
    if not customer or not customer.get('id'):
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    order = await wc_service.get_order(order_id)
    if not order or order.get('customer_id') != customer.get('id'):
        await message.answer(f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        return
        
    # 2. –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    product_ids = [item['product_id'] for item in order.get('line_items', [])]
    image_urls = []
    if product_ids:
        products, _ = await wc_service.get_products(include=product_ids, per_page=len(product_ids))
        if products:
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å {product_id: image_url} –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            product_images_map = {
                p['id']: p['images'][0]['src']
                for p in products if p.get('images')
            }
            # –°–æ–±–∏—Ä–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
            for item in order.get('line_items', []):
                url = product_images_map.get(item['product_id'])
                if url:
                    image_urls.append(url)
    
    # 3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    details_text = format_customer_order_details(order)
    
    # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤
    try:
        if len(image_urls) == 1:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–¥–∏–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            await message.answer_photo(
                photo=image_urls[0],
                caption=details_text
            )
        elif len(image_urls) > 1:
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –º–Ω–æ–≥–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É...
            media_group = [InputMediaPhoto(media=url) for url in image_urls[:10]] # –õ–∏–º–∏—Ç 10 –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
            await message.answer_media_group(media=media_group)
            # ...–∞ –∑–∞—Ç–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await message.answer(text=details_text)
        else:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await message.answer(text=details_text)
    except Exception as e:
        logger.error(f"Failed to send order details with photo/media for order {order_id}: {e}")
        # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –º–µ–¥–∏–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ —à–ª–µ–º —Ç–µ–∫—Å—Ç
        await message.answer(text=details_text)

@user_router.callback_query(F.data.startswith("send_contact:"))
async def handle_send_contact_callback(query: CallbackQuery, state: FSMContext):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
    –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç —Å –ø–æ–º–æ—â—å—é Reply-–∫–Ω–æ–ø–∫–∏.
    """
    try:
        order_id = int(query.data.split(":")[1])
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ FSM, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–Ω—Ç–∞–∫—Ç
    await state.set_state(UserStates.awaiting_contact)
    await state.update_data(order_id=order_id)
    
    await query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
        reply_markup=get_request_contact_keyboard()
    )
    # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await query.message.edit_reply_markup(reply_markup=None)
    await query.answer()

@user_router.message(F.text == "–û—Ç–º–µ–Ω–∞", UserStates.awaiting_contact)
async def handle_contact_cancel(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞."""
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())

@user_router.callback_query(F.data.startswith("req_contact_mgr:"))
async def handle_request_contact_from_manager(query: CallbackQuery, state: FSMContext):
    """
    –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
    """
    # <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–∞–µ–º order_id –∏–∑ callback_data
    try:
        order_id = int(query.data.split(":")[1])
    except (IndexError, ValueError):
        await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–∫–∞–∑–∞ –≤ –∫–Ω–æ–ø–∫–µ.", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–∫–∞–∑–∞ –≤ FSM, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ
    await state.set_state(UserStates.awaiting_contact)
    await state.update_data(order_id=order_id)

    await query.message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.",
        reply_markup=get_request_contact_keyboard()
    )
    await query.message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    await query.answer()



@user_router.message(F.contact, UserStates.awaiting_contact)
async def handle_contact_received(message: Message, state: FSMContext, tg_service: TelegramService):
    """
    –õ–æ–≤–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç, –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    contact: Contact = message.contact
    data = await state.get_data()
    order_id = data.get("order_id")
    await state.clear()
    
    # –°–∫—Ä—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    user_info_block = format_customer_info(message.from_user.model_dump())
    
    text_to_manager = (
        f"üìû –ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{hbold(str(order_id))}:\n\n"
        f"{user_info_block}\n"
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {hcode(contact.phone_number)}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
    # tg_service.manager_ids —É–∂–µ –µ—Å—Ç—å –≤ —Å–µ—Ä–≤–∏—Å–µ
    for manager_id in tg_service.manager_ids:
        await tg_service._send_message_safe(manager_id, text_to_manager)
    
    logger.info(f"User {message.from_user.id} sent contact for order {order_id}")



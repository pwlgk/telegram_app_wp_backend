# backend/app/services/telegram.py

import logging
from datetime import datetime
from typing import Dict
from aiogram import Bot
from aiogram.utils.markdown import hbold, hitalic, hlink, hcode
from aiogram.exceptions import TelegramAPIError
from app.bot.utils import format_customer_info # <<< –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é

from app.core.config import settings
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from app.bot.keyboards.inline import get_admin_order_keyboard, get_post_order_keyboard

logger = logging.getLogger(__name__)

class TelegramNotificationError(Exception):
    """Custom exception for notification errors."""
    pass

class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API.
    """
    def __init__(self, bot: Bot):
        if not isinstance(bot, Bot):
             raise ValueError("TelegramService requires an initialized aiogram.Bot instance.")
        self.bot = bot
        self.manager_ids = settings.TELEGRAM_MANAGER_IDS

        if not self.manager_ids:
             logger.warning("Telegram Manager IDs are not configured. Notifications will not be sent.")

    async def _send_message_safe(self, user_id: int, text: str, reply_markup=None, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π."""
        try:
            await self.bot.send_message(user_id, text, reply_markup=reply_markup, **kwargs)
            logger.debug(f"Message sent successfully to user {user_id}")
            return True
        except TelegramAPIError as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω)
            return False
        except Exception as e:
            logger.exception(f"Unexpected error sending message to user {user_id}: {e}")
            return False

    def _format_order_notification(self, order_details: Dict, user_info: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        order_id = order_details.get('id', 'N/A')
        order_number = order_details.get('number', order_id)
        order_total = order_details.get('total', 'N/A')
        currency = order_details.get('currency', '')
        date_created_str = order_details.get('date_created', '')
        
        try:
            if date_created_str and 'T' in date_created_str:
                 dt_obj = datetime.fromisoformat(date_created_str.replace('Z', '+00:00'))
                 formatted_date = dt_obj.strftime('%d.%m.%Y %H:%M:%S %Z')
            else:
                 formatted_date = date_created_str
        except Exception:
            formatted_date = date_created_str

        tg_user_id = user_info.get('id')
        tg_username = user_info.get('username')
        tg_first_name = user_info.get('first_name', '')
        tg_last_name = user_info.get('last_name', '')
        user_link = f"tg://user?id={tg_user_id}"
        user_mention = hlink(f"{tg_first_name} {tg_last_name}".strip() or f"User {tg_user_id}", user_link)
        if tg_username:
            user_mention += f" (@{tg_username})"

        items_str_list = []
        for item in order_details.get('line_items', []):
            item_name = item.get('name', 'Unknown Item')
            quantity = item.get('quantity', '?')
            total_item_price = item.get('total', '?')
            items_str_list.append(f"- {hcode(item_name)} ({quantity} —à—Ç.) - {total_item_price} {currency}")
        items_str = "\n".join(items_str_list) if items_str_list else hitalic("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö")

        customer_note = order_details.get('customer_note')
        note_str = f"\n\n{hbold('–ó–∞–º–µ—Ç–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:')}\n{hitalic(customer_note)}" if customer_note else ""
        
        billing_info = order_details.get('billing', {})
        phone = billing_info.get('phone')
        city = billing_info.get('city')
        contact_info_str = ""
        if phone:
            contact_info_str += f"\nüìû {hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {hcode(phone)}"
        if city:
            contact_info_str += f"\nüìç {hbold('–ì–æ—Ä–æ–¥:')} {city}"

        admin_url = f"{settings.WOOCOMMERCE_URL.rstrip('/')}/wp-admin/post.php?post={order_id}&action=edit"
        admin_link_str = f"\n\n{hlink('–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –≤ WP Admin', admin_url)}"
        customer_block = format_customer_info(user_info, order_details.get('billing', {}))

        message = (
            f"üéâ {hbold('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!')} ‚Ññ {hcode(order_number)}\n\n"
            f"üóìÔ∏è {hbold('–î–∞—Ç–∞:')} {formatted_date}\n"
            f"üë§ {hbold('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:')} {customer_block}"
            f"{contact_info_str}\n"
            f"\nüõí {hbold('–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:')}\n{items_str}\n"
            f"\nüí∞ {hbold('–ò—Ç–æ–≥–æ:')} {hcode(f'{order_total} {currency}')}"
            f"{note_str}"
            f"{admin_link_str}"
        )
        return message

    async def notify_new_order(self, order_details: Dict, user_info: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Å –∫–Ω–æ–ø–∫–∞–º–∏."""
        if not self.manager_ids:
            return

        order_id = order_details.get('id')
        customer_tg_id = user_info.get('id')
        if not order_id or not customer_tg_id:
            logger.error(f"Cannot create notification: missing order_id or customer_tg_id.")
            return

        message_text = self._format_order_notification(order_details, user_info)
        reply_markup = get_admin_order_keyboard(order_id, customer_tg_id)

        logger.info(f"Sending notification for order {order_id} to {len(self.manager_ids)} managers...")
        for manager_id in self.manager_ids:
            await self._send_message_safe(manager_id, message_text, reply_markup=reply_markup, disable_web_page_preview=True)

    def _format_status_update_for_customer(self, order_number: str, new_status_slug: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        status_map = {
            'on-hold': '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
            'refunded': '–í–æ–∑–≤—Ä–∞—â–µ–Ω',
            'failed': '–ù–µ —É–¥–∞–ª—Å—è',
        }
        status_text = status_map.get(new_status_slug, new_status_slug.capitalize())

        message = (
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{hcode(order_number)} –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {hbold(status_text)}"
        )
        return message

    async def notify_customer_status_update(self, customer_tg_id: int, order_id: int, order_number: str, new_status: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
        if not customer_tg_id:
            logger.error(f"Cannot notify customer for order {order_id}: customer_tg_id is missing.")
            return

        message_text = self._format_status_update_for_customer(order_number, new_status)
        logger.info(f"Sending status update notification for order {order_id} to customer {customer_tg_id}...")

        await self._send_message_safe(customer_tg_id, message_text)

    def _format_customer_orders(self, orders: list[dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∏–µ–Ω—Ç—É."""
        if not orders:
            return "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

        status_map = {
            'on-hold': '‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏',
            'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'refunded': 'üí∞ –í–æ–∑–≤—Ä–∞—â–µ–Ω',
            'failed': '‚ùóÔ∏è –ù–µ —É–¥–∞–ª—Å—è',
        }

        header = hbold("–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:\n\n")
        order_lines = []

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        for order in orders[:5]:
            order_number = order.get('number', order.get('id'))
            date_str = order.get('date_created', '').split('T')[0] # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
            status_slug = order.get('status', 'unknown')
            status_text = status_map.get(status_slug, status_slug.capitalize())
            total = order.get('total', 'N/A')
            currency = order.get('currency', '')

            # /order_12345 - –¥–µ–ª–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π
            order_line = (
                f"{status_text} (‚Ññ {hcode(order_number)} –æ—Ç {date_str})\n"
                f"–°—É–º–º–∞: {hbold(f'{total} {currency}')}\n"
                f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /order_{order.get('id')}\n"
            )
            order_lines.append(order_line)
        
        return header + "\n".join(order_lines)
    
    async def notify_customer_order_created(self, customer_tg_id: int, order_id: int, order_number: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç."""
        text = (
            f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{hbold(order_number)} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            f"–ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–º —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        )
        keyboard = get_post_order_keyboard(order_id)
        await self._send_message_safe(customer_tg_id, text, reply_markup=keyboard)

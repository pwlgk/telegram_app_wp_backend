# backend/app/services/telegram.py
from datetime import datetime
import logging
from typing import List, Dict, Optional, Any
from aiogram import Bot
from aiogram.utils.markdown import hbold, hitalic, hlink, hcode
from aiogram.exceptions import TelegramAPIError

from app.core.config import settings

logger = logging.getLogger(__name__)

class TelegramNotificationError(Exception):
    """Custom exception for notification errors."""
    pass

class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API.
    """
    def __init__(self, bot: Bot):
        if not isinstance(bot, Bot):
             raise ValueError("TelegramService requires an initialized aiogram.Bot instance.")
        self.bot = bot
        self.manager_ids = settings.TELEGRAM_MANAGER_IDS

        if not self.manager_ids:
             logger.warning("Telegram Manager IDs are not configured. Notifications will not be sent.")

    async def _send_message_safe(self, user_id: int, text: str, **kwargs):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫."""
        try:
            await self.bot.send_message(user_id, text, **kwargs)
            logger.debug(f"Message sent successfully to user {user_id}")
            return True
        except TelegramAPIError as e:
            logger.error(f"Failed to send message to user {user_id}: {e}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
            # (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
            return False
        except Exception as e:
            logger.exception(f"Unexpected error sending message to user {user_id}: {e}")
            return False

    def _format_order_notification(self, order_details: Dict, user_info: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞."""
        order_id = order_details.get('id', 'N/A')
        order_number = order_details.get('number', order_id) # WC –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 'number'
        order_total = order_details.get('total', 'N/A')
        currency = order_details.get('currency', '')
        date_created_str = order_details.get('date_created', '')
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            if date_created_str and 'T' in date_created_str:
                 dt_obj = datetime.fromisoformat(date_created_str.replace('Z', '+00:00'))
                 # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–æ–∫–∞–ª—å)
                 formatted_date = dt_obj.strftime('%d.%m.%Y %H:%M:%S %Z')
            else:
                 formatted_date = date_created_str
        except Exception:
            formatted_date = date_created_str


        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ
        tg_user_id = user_info.get('id')
        tg_username = user_info.get('username')
        tg_first_name = user_info.get('first_name', '')
        tg_last_name = user_info.get('last_name', '')
        user_link = f"tg://user?id={tg_user_id}"
        user_mention = hlink(f"{tg_first_name} {tg_last_name}".strip() or f"User {tg_user_id}", user_link)
        if tg_username:
            user_mention += f" (@{tg_username})"

        # –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        items_str_list = []
        for item in order_details.get('line_items', []):
            item_name = item.get('name', 'Unknown Item')
            quantity = item.get('quantity', '?')
            price = item.get('price', '?') # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            total_item_price = item.get('total', '?') # –û–±—â–∞—è —Ü–µ–Ω–∞ –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            items_str_list.append(f"- {hcode(item_name)} ({quantity} —à—Ç.) - {total_item_price} {currency}")
        items_str = "\n".join(items_str_list) if items_str_list else hitalic("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö")

        # –ó–∞–º–µ—Ç–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        customer_note = order_details.get('customer_note')
        note_str = f"\n\n{hbold('–ó–∞–º–µ—Ç–∫–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:')}\n{hitalic(customer_note)}" if customer_note else ""

        # –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑ –≤ –∞–¥–º–∏–Ω–∫–µ WP (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å)
        admin_url = f"{settings.WOOCOMMERCE_URL.rstrip('/')}/wp-admin/post.php?post={order_id}&action=edit"
        admin_link_str = f"\n\n{hlink('–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –≤ WP Admin', admin_url)}"

        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = (
            f"üéâ {hbold('–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!')} ‚Ññ {hcode(order_number)}\n\n"
            f"üóìÔ∏è {hbold('–î–∞—Ç–∞:')} {formatted_date}\n"
            f"üë§ {hbold('–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:')} {user_mention}\n"
            # f"üìû {hbold('–¢–µ–ª–µ—Ñ–æ–Ω:')} {order_details.get('billing', {}).get('phone', hitalic('–ù–µ —É–∫–∞–∑–∞–Ω'))}\n" # –ï—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            # f"üìß {hbold('Email:')} {order_details.get('billing', {}).get('email', hitalic('–ù–µ —É–∫–∞–∑–∞–Ω'))}\n" # –ï—Å–ª–∏ —Å–æ–±–∏—Ä–∞–µ–º email
            f"\nüõí {hbold('–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:')}\n{items_str}\n"
            f"\nüí∞ {hbold('–ò—Ç–æ–≥–æ:')} {hcode(f'{order_total} {currency}')}"
            f"{note_str}"
            f"{admin_link_str}" # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∫—É
        )
        return message


    async def notify_new_order(self, order_details: Dict, user_info: Dict):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º.

        Args:
            order_details: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ WooCommerce.
            user_info: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram initData.
        """
        if not self.manager_ids:
            logger.warning("Cannot send order notification: Manager IDs are not set.")
            return

        if not order_details or not user_info:
             logger.error("Cannot send notification: Missing order_details or user_info.")
             return

        message_text = self._format_order_notification(order_details, user_info)

        logger.info(f"Sending notification for order {order_details.get('id')} to {len(self.manager_ids)} managers...")

        success_count = 0
        for manager_id in self.manager_ids:
            if await self._send_message_safe(manager_id, message_text, disable_web_page_preview=True):
                success_count += 1

        if success_count == len(self.manager_ids):
             logger.info(f"Notification for order {order_details.get('id')} sent successfully to all managers.")
        else:
             logger.warning(f"Notification for order {order_details.get('id')} sent to {success_count}/{len(self.manager_ids)} managers.")
        # –ú–æ–∂–Ω–æ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        # if success_count == 0:
        #     raise TelegramNotificationError("Failed to send notification to any manager.")
    
    def _format_status_update_for_customer(self, order_number: str, new_status: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞."""
        status_map = {
            'on-hold': '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
            'processing': '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
            'completed': '–í—ã–ø–æ–ª–Ω–µ–Ω (–î–æ—Å—Ç–∞–≤–ª–µ–Ω)',
            'cancelled': '–û—Ç–º–µ–Ω–µ–Ω',
            'refunded': '–í–æ–∑–≤—Ä–∞—â–µ–Ω',
            'failed': '–ù–µ —É–¥–∞–ª—Å—è',
            # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã WooCommerce –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        }
        status_text = status_map.get(new_status, new_status.capitalize()) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∞–º —Å—Ç–∞—Ç—É—Å

        message = (
            f"‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ ‚Ññ{hcode(order_number)} –æ–±–Ω–æ–≤–ª–µ–Ω.\n\n"
            f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {hbold(status_text)}"
        )
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ /myorders
        # message += "\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /myorders"
        return message

    async def notify_customer_status_update(
            self,
            customer_tg_id: int,
            order_id: int, # ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ª–æ–≥–æ–≤
            order_number: str, # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            new_status: str
        ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""
        if not customer_tg_id:
            logger.error(f"Cannot notify customer for order {order_id}: customer_tg_id is missing.")
            return

        message_text = self._format_status_update_for_customer(order_number, new_status)
        logger.info(f"Sending status update notification for order {order_id} to customer {customer_tg_id}...")

        if await self._send_message_safe(customer_tg_id, message_text):
            logger.info(f"Status update notification sent successfully to customer {customer_tg_id}.")
        else:
            # –û—à–∏–±–∫–∞ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞ –≤ _send_message_safe
            logger.warning(f"Failed to send status update notification to customer {customer_tg_id}.")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø. –ª–æ–≥–∏–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ –Ω–µ—Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏)